@startuml

interface Filterable {
    + filter(tokens: ArrayList<String>): ArrayList<String>
}

interface IndexingModule {
    + queryIndex(tokens: List<String>): List<T>
}


interface SearchModule {
    + search(query: String): SearchHits
    + getDelimiters(): List<String>
    + addDelimiter(delimiter: String)
    + removeDelimiter(delim: String)
}
class SearchLog {
    - searchString: String
    - timeSearched: String
    - brandsCounter: int
    - productCounter: int
    - contentCounter: int
    - brands: List<String>
    - products: List<String>
    - contents: List<String>
    + toString(): String
}

class SearchLogger {
    - {static}logger: Logger
    + {static} logSearch(search: String, searchHits: SearchHits, filterTokens: List<String>): void
    - {static} insertValues(elements: List<T>, id: int, sql: String, getElementID: Function<T, String>)
    + {static} getAllSearchLogs(): List<SearchLog>
}

class DelimiterSettings {
    - delimiters: List<String>
    - dbConnection: Connection
    - stmt: PreparedStatement
    + getDelimiters(): List<String>
    - updateDelimitersToDatabaseState()
    - resetDelimiterAttribute()
    - moveResultsSetToDelimitersAttribute(ResultSet)
    + addDelimiter(String): void
    - insertDelimiterIntoDatabase(String)
    + removeDelimiter(String): boolean
    - delimiterNotFound(String): boolean
    - makePreparedStatement(String): PreparedStatement
    - closeAll()
    - customPrinter(String)
}
class Tokenizer {
    - delimiterSettings: DelimiterSettings
    - stringList: List<String>
    + tokenize (String): List<String>
    - splitString(String): ArrayList<String>
    - removeAllEmptyStrings(List<String>)
    - splitStringUsingDelimiters(String): String[]
    - listIsEmpty(): boolean
}

class RegexUtils {
    + {static}convertDelimitersToRegex(stringList: List<String>): String
    - {static}addDelimiterToStringBuilder(sb: StringBuilder, i: int, (stringList: List<String>): void
}

class IllegalChars {
    + removeForbiddenChars(String): String
    + addChar(character: String): void
    + illegalCharsFromDB(): List<String>
    + removeChar(String)
}

class SearchModuleImpl implements SearchModule {
    - {static} logger: Logger
    - indexingModules: Map<Class<?>, IndexingModule<?>>
    - filteringModules: Set<Filterable>
    - delimiterSettings: DelimiterSettings

    - getParameterizedTypeOfIndexingModule(Class<?>): Class<?>
    + addIndexingModule(index: T): void
    + removeIndexingModule(Class<?>): void
    + addFilteringModule(Filterable)
    + removeFilteringModule(Filterable)
    + filterTokens(List<String>): List<String>

    + queryIndexOfType(clazz: Class<T>, tokens: List<String>): List<T>
    + search(query: String): SearchHits
}







class DBConnection {
    - url: String
    - user: String
    - password: String
    - {static} conn: Connection
    - {static} dbConnection: DBConnection

    - DBConnection()
    - loadConfig(): void
    + {static} getConnection(): Connection
    ' see https://stackoverflow.com/a/36710057
}



Tokenizer --> DelimiterSettings
Tokenizer -->RegexUtils

DelimiterSettings --> DBConnection

Filterable <- SearchModuleImpl
SearchModuleImpl ---> DelimiterSettings
SearchModuleImpl --> Tokenizer
SearchModuleImpl --> IndexingModule
SearchModuleImpl -> SearchLogger
SearchModuleImpl --> IllegalChars

SearchLogger --> SearchLog
IllegalChars --> RegexUtils

@enduml