@startuml

interface BrandGetter {
    + query(tokens: List<String>): List<Integer>
}

interface Filterable {
    + filter(tokens: ArrayList<String>): ArrayList<String>
}

interface IndexingModule {
    + queryIndex(tokens: List<String>): List<T>
}


interface SearchModule {
    + search(query: String): SearchResult
    + getDelimiters(): String[]
    + getIgnoredCharacters(): Character[]
    + addDelimiter(delimiter: String)
    + addIgnoredCharacter(c: Character)
    + removeDelimiter(delimiter: String)
    + removeIgnoredCharacter(c: Character)
    + SearchHits search(query: String)
}

class ReplaceForbbidenChars {
    + removeForbiddenChars(toSort: String): String
}

class SearchModuleImpl implements SearchModule {
    - indexingModules: Set<IndexingModule<?>>
    - delimiters: String[]
    - ignoredCharacters: Character[]
    - databaseConnection: DatabaseConnection
    - logger: Logger
    - addIndexingModule(index: T): void
    - removeIndexingmModule(index: T): void
    + queryIndexOfType(clazz: Class<T>, tokens: List<String>): List<T>
    + search(query: String): SearchHits
    - tokenize(mystring): String[]
    - saveSettingsToDB()
    - readSettingsFromDB()
}

class SearchModuleUtils {
    + convertDelimitersToRegex(stringList: List<String>): String
    - addDelimiterToStringBuilder(sb: StringBuilder, i: int, (stringList: List<String>): void
}

class SearchSettings {
    - delimiters: ArrayList<String>
    + getDelimiters(): ArrayList<String>
    + appendDelimiters(delimitier: String): void
}

class TokenFiltration {
    +filter(tokens: ArrayList<String>): ArrayList<String>
}

class Tokenization {
    - searchModuleUtils: SearchModuleUtils
    - ss: SearchSettings
    - stringList: List<String>
    +tokenize(s: String): list<String>
}

class DatabaseConnection {
    - url: String
    - username: String
    - password: String
    - hasSSL: boolean
    - connection: Connection

    + isConnected(): boolean
    + connect(): boolean
    + disconnect()
    + makeQuery(statement: PreparedStatement): ResultSet
    ' see https://stackoverflow.com/a/36710057
    + getLogger(moduleName): Logger
}

class Exception {
    // From JDK //
}

class DatabaseConnectionException extends Exception {
    // Throws when the database connection failed //
}


class Connection {
    // from postgresql jdbc //
}

class PreparedStatement {
    // from postgresql jdbc //
}

class ResultSet {
    // from postgresql jdbc //
}

class Logger {
    // from log4j //
}

Tokenization -> SearchModuleUtils
Tokenization --> SearchSettings
SearchResult <- SearchModule
Filterable <- SearchModuleImpl
SearchModuleImpl -> DatabaseConnection
DatabaseConnectionException <-- DatabaseConnection: //<<throws>>//
DatabaseConnectionException <-- SearchModuleImpl: //<<throws>>//

SearchModuleImpl --> Logger
DatabaseConnection -> Logger

DatabaseConnection -> ResultSet
DatabaseConnection -> PreparedStatement
DatabaseConnection -> Connection

ResultSet --[hidden]> PreparedStatement
PreparedStatement -[hidden]> Connection



@enduml